<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>String类基础详解</title>
    <link href="undefined2020/01/08/String%E7%B1%BB/"/>
    <url>2020/01/08/String%E7%B1%BB/</url>
    
    <content type="html"><![CDATA[<h1 id="String类基础"><a href="#String类基础" class="headerlink" title="String类基础"></a><center>String类基础</center></h1><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;string类是java中比较特殊的一个类，它不属于Java的基本数据类型，但可以像基本数据类型那样使用。<br>&nbsp;   </p><h2 id="Java基本API中String类基础介绍"><a href="#Java基本API中String类基础介绍" class="headerlink" title="Java基本API中String类基础介绍:"></a>Java基本API中String类基础介绍:</h2><pre><code class="java">public final class Stringextends Objectimplements Serializable, Comparable&lt;String&gt;, CharSequence</code></pre><p>字符串是常量；<font color=red><strong>它们的值在创建之后不能更改</strong></font>。字符串缓冲区支持可变的字符串。因为 String 对象是不可变的，所以可以共享。例如： </p><pre><code class="java"> String str = &quot;abc&quot;;// 等效于：  char data[] = {&#39;a&#39;, &#39;b&#39;, &#39;c&#39;};  String str = new String(data);</code></pre><p><strong>String类为什么不可以改变</strong><br>根据jdk源码分析，字符串实际就是一个内部封装char数组，并且char数组是被final修饰的。</p><pre><code class="java">ublic final class String    implements java.io.Serializable, Comparable&lt;String&gt;, CharSequence {    /** The value is used for character storage. */    private final char value[];    /** Cache the hash code for the string */    private int hash; // Default to 0</code></pre><p>并且 String 中的所有的方法，都是对于 char 数组的改变，只要是对它的改变，方法内部都是返回一个新的 String 实例。</p><hr><p><strong>举例</strong>（此处理解不深，日后加强）     </p><pre><code class="java">public static void main(string[] arg){    String a = &quot;abc&quot;;    System.out.println(a);    a = &quot;def&quot;;    Sysout.out.println(a);}//abc//def</code></pre><p>String对象是不可变的，a = “abc”,然后a = “def”,这种情况依然符合String的不可变性<br><img src="https://i.loli.net/2019/12/31/WisKxlMkdzPVYnq.png" srcset="/img/loading.gif" alt="Snipaste_2019-12-31_11-14-57.png"><br>a = “abc” 时，在堆内存中创建了一个对象”abc”，后来执行a = “def” 时，在内存中又创建了一个对象”def”，<strong>“a” 只是改变了指向的地址</strong>，不变的是堆内存中的值。</p><p>&nbsp;<br>&nbsp;<br>我们创建的String类对象其实在内部就是一个个字符，然后储存在value数组里面。但是对外没有setValue方法，所以String对象在外部看起来就是不可变的:<br><img src="https://i.loli.net/2019/12/31/TUXDvoGyixZ2Npf.png" srcset="/img/loading.gif" alt="Snipaste_2019-12-31_11-13-28.png"></p><hr><h2 id="字符串操作方法"><a href="#字符串操作方法" class="headerlink" title="字符串操作方法"></a>字符串操作方法</h2><ul><li><strong>字符串连接</strong><br>两个字符串之间 “+” 相连 生成新的字符串<pre><code class="java">String str = &quot;Hello&quot;;String str2 = &quot;world&quot;;String str3 = str + &quot; &quot; + str2;//输出结果: Hello world</code></pre>或者使用concat(String str)方法<pre><code class="java">String str1 = &quot;Hello&quot;;String str2 = &quot;World&quot;;System.out.println(str1.concat(str2));//打印结果: HelloWorld</code></pre><ul><li><strong>length()方法 获取字符串长度</strong><pre><code class="java">String str = &quot;Hello World&quot;;System.out.println(str.length());//输出结果: 10 空格也计算在内</code></pre></li><li><strong>equals()方法 判断字符串是否相等</strong><br>判断俩个字符出串是否相等，并返回boolean值，<strong>切记不可用 “==” 来比较是否相等</strong>，因为 “==” 比较的实地址值。判断字符串相等有equals()和equalsIgnoreCase()两种方法，区别在于第一个区分大小写，后者忽略大小写。<pre><code class="java">public static void main(String[] args) {String str = &quot;HELLOWORLD&quot;;String str2 = &quot;helloworld&quot;;String str3 = &quot;HELLOWORLD&quot;;String str4 = str;</code></pre></li></ul></li></ul><p>System.out.println(“str == str2: “ + (str == str2));<br>System.out.println(“str == str3: “ + (str == str3));<br>System.out.println(“str == str4: “ + (str == str4));<br>System.out.println(“str.equals(str2): “ + str.equals(str2));<br>System.out.println(“str.equals(str3): “ + str.equals(str3));<br>System.out.println(“str.equalsIgnoreCase(str2): “ + str.equalsIgnoreCase(str2));<br>System.out.println(“str.equalsIgnoreCase(str3): “ + str.equalsIgnoreCase(str3));<br>}</p><pre><code>输出结果：```javastr == str2: falsestr == str3: truestr == str4: truestr.equals(str2): falsestr.equals(str3): truestr.equalsIgnoreCase(str2): truestr.equalsIgnoreCase(str3): true</code></pre><p>对于常量字符串，Java把相同内容只分配了一块内存，对于重复引用的字符串只保留一份，所以 “str” 与 “str3” 都指向了常量池中的唯一一个 “HELLOWORLD” 所以比较 “str” 与 “str2” 的地址值相等， （str == str2）为true。 </p><ul><li><p><strong>substring()方法 字符串截取</strong></p><pre><code class="java">String str= &quot;HelloWorld&quot;;System.out.println(str.substring(5));//WorldSystem.out.println(str.substring(0,5));//Hello</code></pre></li><li><p><strong>charAt方法 返回char类型字符</strong></p><pre><code class="java">String s = &quot;HelloWorld&quot;;char result = s.charAt(4);System.out.println(result);//打印结果: &quot;o&quot;</code></pre></li><li><p><strong>contains方法 判断是否包含</strong></p><pre><code class="java">String str = &quot;HelloWorld&quot;;boolean a = str.contains(&quot;Hello&quot;);boolean b =str.contains(&quot;IOU&quot;);System.out.println(a);//trueSystem.out.println(b);//false</code></pre><p>由于contains()方法是确定给定字符的char值在本字符串中是否包含，所以区分大小写。</p></li><li><p><strong>replace方法 字符串替换</strong></p><pre><code class="java">String s = &quot;HelloWorld&quot;;String str= s.replace(&quot;World&quot;,&quot;Beauty&quot;);String str2= s.replaceFirst(&quot;o&quot;,&quot;O&quot;);System.out.println(str);     //HelloBeautySystem.out.println(str2);    //HellOWorld</code></pre></li><li><p><strong>trim方法 去字符串中的空格</strong><br>该方法用于去掉字符串<strong>前导，尾部</strong>空格</p><pre><code class="java">String s1 = &quot;    Hello World    &quot;;String s2 = s1.trim();  // 打印结果: HellWord</code></pre></li><li><p><strong>toLowerCase(),toUpperCase()方法转换大小写</strong></p><pre><code class="java">String str1= &quot;AAAaaa&quot;;String str2 = str1.toLowerCase();String str3 = str1.toUpperCase();System.out.println(str2);System.out.println(str3);//打印结果：aaaaaa//         AAAAAA</code></pre></li><li><p><strong>byte[] getBytes() 转换为字节数组</strong></p><pre><code class="java">String str = &quot;HelloWorld&quot;;byte[] bytes=str.getBytes();for (byte i:bytes) {  System.out.print(i+&quot; &quot;);}//打印结果: 72 101 108 108 111 87 111 114 108 100 </code></pre></li><li><p><strong>toCharArry方法 字符串转数组</strong></p><pre><code class="java">String s = &quot;HelloWorld&quot;;char[] a= s.toCharArray();for (char i:a) {System.out.println(i);}</code></pre></li><li><p><strong>spilt方法 字符串分割</strong></p><pre><code class="java">String str= &quot;HelloWorld&quot;;String[] str2= str.split(&quot;o&quot;);String str = &quot;Hello,World,IOU&quot;;String[] a = str.split(&quot;,&quot;,2);for (String i : a) {  System.out.println(i);}//输出结果：Hello//         World,IOU</code></pre></li><li><p><strong>String(char[],value) 方法 数组转字符串</strong></p><pre><code class="java">char[] ch = {&#39;a&#39;,&#39;b&#39;,&#39;c&#39;};String str = new String (ch);System.out.println(str);//打印结果: abc</code></pre></li><li><p><strong>boolean startsWith(String str)  是否已指定字符串开头<br>boolean endsWith(String str)  是否已指定字符串结尾</strong></p><pre><code class="java">String str1 = &quot;123456789&quot;;String str2 = &quot;123&quot;;String str3 = &quot;789&quot;;System.out.println(str1.startsWith(str2));System.out.println(str1.endsWith(str3));//打印结果: true//         true</code></pre></li><li><p><strong>boolean isEmpty()方法 判断字符串是否为空</strong></p><pre><code class="java">String str1 = &quot;&quot;;String str2 = &quot;    &quot;;System.out.println(str1.isEmpty());System.out.println(str2.isEmpty());//打印结果: true//         false</code></pre></li><li><p><strong><font size=4>String.valueOf ( )方法</strong></font>  </p></li></ul><p><strong>1.由基本数据型态转换成String</strong><br>（1）String.valueOf(boolean b) : 将 boolean 变量 b 转换成字符串<br>（2）String.valueOf(char c) : 将 char 变量 c 转换成字符串<br>（3）String.valueOf(char[] data) : 将 char 数组 data 转换成字符串<br>（4）String.valueOf(char[] data, int offset, int count) : 将 char 数组 data 中 由 data[offset] 开始取 count 个元素 转换成字符串<br>（5）String.valueOf(double d) : 将 double 变量 d 转换成字符串<br>（6）String.valueOf(float f) : 将 float 变量 f 转换成字符串<br>（7）String.valueOf(int i) : 将 int 变量 i 转换成字符串<br>（8）String.valueOf(long l) : 将 long 变量 l 转换成字符串<br>（9）String.valueOf(Object obj) : 将 obj 对象转换成 字符串, 等于 obj.toString()  </p><pre><code class="java">int i = 1;String str = String.valueOf(i);// str 为 1。</code></pre><p><strong>2.由 String 转换成 数字的基本数据型态</strong><br>（1）byte : Byte.parseByte(String s) : 将 s 转换成 byte<br>（2）Byte.parseByte(String s, int radix) : 将字符串参数解析为第二个参数指定的基数中的有符号字节，并返回一个byte值。<br>（3）double : Double.parseDouble(String s) : 将 s 转换成 double<br>（4）float : Double.parseFloat(String s) : 将 s 转换成 float<br>（5）int : Integer.parseInt(String s) : 将 s 转换成 int<br>（6）long : Long.parseLong(String s)  : 将 s 转换成 Long</p><hr><h2 id="Java-StringBuffer-和-StringBuilder-类"><a href="#Java-StringBuffer-和-StringBuilder-类" class="headerlink" title="Java StringBuffer 和 StringBuilder 类"></a>Java StringBuffer 和 StringBuilder 类</h2><p>String是只读字符串，所引用的字符串不能被改变，一经定义，无法再增删改。<br>String 定义的字符串保存在常量池里面，进行+操作时不能直接在原有基础上拼接。<br>当对字符串进行修改的时候，需要使用 StringBuffer 和 StringBuilder 类，StringBuffer 和 StringBuilder 类的对象能够被多次的修改，并且不产生新的未使用对象。String和Stringbuilder在单线程环境下使用，StringBuffer在多线程环境下使用，Stringbuilder 和StringBuffer 实现方法类似，不过StringBuffer 用synchronized关键字修饰（保证线程同步）。StringBuffer 线程安全 StringBuilder 线程不安全，StringBuilder 速度快。<br>&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;<br><strong>StringBuffer 与 StringBuilder 用法相似，大多情况下使用StringBuilder</strong><br>1.public StringBuffer append(String s)&nbsp;&nbsp;&nbsp;将指定的字符串追加到此字符序列<br>2.public StringBuffer reverse()&nbsp;&nbsp;&nbsp; 将此字符序列用其反转形式取代<br>3.public delete(int start, int end)&nbsp;&nbsp;&nbsp;移除此序列的子字符串中的字符<br>4.public insert(int offset, int i)&nbsp;&nbsp;&nbsp;将 int 参数的字符串表示形式插入此序列中<br>5.replace(int start, int end, String str)&nbsp;&nbsp;&nbsp;使用给定 String 中的字符替换此序列的子字符串中的字符</p><pre><code class="java">StringBuilder sb = new StringBuilder(&quot;HelloWorld&quot;);System.out.println(sb.append(&quot;,IOU!!!&quot;));System.out.println(sb.delete(5,10));//含头不含尾System.out.println(sb.insert(9,1000));String s = &quot;-.-&quot;;System.out.println(sb.replace(13,16,s));System.out.println(sb.reverse());</code></pre><p>打印结果 :</p><pre><code class="java">HelloWorld,IOU!!!Hello,IOU!!!Hello,IOU1000!!!Hello,IOU1000-.--.-0001UOI,olleH</code></pre>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>-Java基础 -类型转换 -API</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java关键字</title>
    <link href="undefined2019/12/30/java%E5%85%B3%E9%94%AE%E5%AD%97/"/>
    <url>2019/12/30/java%E5%85%B3%E9%94%AE%E5%AD%97/</url>
    
    <content type="html"><![CDATA[<h1 id="关键字整理"><a href="#关键字整理" class="headerlink" title="关键字整理"></a><center>关键字整理</center></h1><table><thead><tr><th align="center">关键字</th><th align="center">含义</th></tr></thead><tbody><tr><td align="center">abstract</td><td align="center">抽象类或方法</td></tr><tr><td align="center">assert</td><td align="center">用来查找内部程序错误</td></tr><tr><td align="center">break</td><td align="center">跳出switch循环</td></tr><tr><td align="center">byte</td><td align="center">8位整数类型</td></tr><tr><td align="center">case</td><td align="center">switch的一个分支</td></tr><tr><td align="center">catch</td><td align="center">捕获异常的try块字句</td></tr><tr><td align="center">char</td><td align="center">Unicode字符类型</td></tr><tr><td align="center">class</td><td align="center">定义一个类的类型</td></tr><tr><td align="center">const</td><td align="center">是保留的关键字，但现在不用</td></tr><tr><td align="center">continue</td><td align="center">在循环末尾继续</td></tr><tr><td align="center">default</td><td align="center">switch的缺省子句</td></tr><tr><td align="center">do</td><td align="center">do/while循环最前面的语句</td></tr><tr><td align="center">double</td><td align="center">双精度浮点数据类型</td></tr><tr><td align="center">else</td><td align="center">if语句的else字句</td></tr><tr><td align="center">enum</td><td align="center">枚举类型</td></tr><tr><td align="center"><strong>extends</strong></td><td align="center">定义一个父类</td></tr><tr><td align="center">final</td><td align="center">一个常量，或是一个不能覆盖的类或方法</td></tr><tr><td align="center">finall</td><td align="center">try块中总会执行的部分</td></tr><tr><td align="center">float</td><td align="center">单精度浮点数类型</td></tr><tr><td align="center">for</td><td align="center">一种循环类型</td></tr><tr><td align="center">goto</td><td align="center">保留字，不被使用</td></tr><tr><td align="center">if</td><td align="center">条件语句</td></tr><tr><td align="center"><strong>implements</strong></td><td align="center">定义一个类实现的接口</td></tr><tr><td align="center">import</td><td align="center">导入一个包</td></tr><tr><td align="center"><strong>instanceof</strong></td><td align="center">测试一个对象是否为一个类的实例</td></tr><tr><td align="center">int</td><td align="center">32位整数类型</td></tr><tr><td align="center"><strong>interface</strong></td><td align="center">一种抽象类，其中包含可以由类实现的方法</td></tr><tr><td align="center">long</td><td align="center">64位长整数类型</td></tr><tr><td align="center">native</td><td align="center">由宿主系统实现的一个方法</td></tr><tr><td align="center">new</td><td align="center">分配一个新对象或数组</td></tr><tr><td align="center">null</td><td align="center">一个空引用（从技术上说是一个直接量，而不是关键字）</td></tr><tr><td align="center">package</td><td align="center">包含类的一个包</td></tr><tr><td align="center">private</td><td align="center">只能由该类的方法访问</td></tr><tr><td align="center">protected</td><td align="center">只能由该类，其子类以及同一个包中的其他类的方法访问</td></tr><tr><td align="center">public</td><td align="center">可以由所有类的方法访问</td></tr><tr><td align="center">return</td><td align="center">从一个方法返回</td></tr><tr><td align="center">short</td><td align="center">16位整数类型</td></tr><tr><td align="center">static</td><td align="center">这个特性是这个类特有的，而不属于这个类的对象</td></tr><tr><td align="center"><strong>strictfp</strong></td><td align="center">对浮点数计算使用严格的规则</td></tr><tr><td align="center">super</td><td align="center">超类对象或构造函数</td></tr><tr><td align="center">switch</td><td align="center">一个选择语句</td></tr><tr><td align="center"><strong>synchronized</strong></td><td align="center">对线程而言是原子的方法或代码</td></tr><tr><td align="center">this</td><td align="center">当前类的一个方法或构造函数的隐含参数</td></tr><tr><td align="center">throw</td><td align="center">抛出一个异常</td></tr><tr><td align="center">try</td><td align="center">补货异常的代码块</td></tr><tr><td align="center">void</td><td align="center">指示一个方法不返回任何值</td></tr><tr><td align="center"><strong>volatile</strong></td><td align="center">确保一个字段可以由多个线程访问</td></tr><tr><td align="center">while</td><td align="center">一种循环</td></tr></tbody></table>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>-Java基础 -关键字</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java中常见转换</title>
    <link href="undefined2019/12/27/%E7%B1%BB%E5%9E%8B%E8%BD%AC%E6%8D%A2/"/>
    <url>2019/12/27/%E7%B1%BB%E5%9E%8B%E8%BD%AC%E6%8D%A2/</url>
    
    <content type="html"><![CDATA[<h1 id="Java中常见转换"><a href="#Java中常见转换" class="headerlink" title="Java中常见转换"></a><center>Java中常见转换</center></h1><h2 id="在了解基本数据类型转换前，先了解Java中8中基本数据类型"><a href="#在了解基本数据类型转换前，先了解Java中8中基本数据类型" class="headerlink" title="在了解基本数据类型转换前，先了解Java中8中基本数据类型"></a>在了解基本数据类型转换前，先了解Java中8中基本数据类型</h2><table><thead><tr><th>Type</th><th align="center">Defult</th><th align="center">Size</th><th>Range</th></tr></thead><tbody><tr><td>byte</td><td align="center">0</td><td align="center">8 bits</td><td>-128 ~ 127</td></tr><tr><td>short</td><td align="center">0</td><td align="center">16 bits</td><td>-32768 ~ 32767</td></tr><tr><td>int</td><td align="center">0</td><td align="center">32 bits</td><td>-2147483648 ~ 2147483647</td></tr><tr><td>float</td><td align="center">0.0f</td><td align="center">32 bits</td><td>±1.4E-45 ~ ±3.4028235E+38</td></tr><tr><td>long</td><td align="center">0L</td><td align="center">64 bits</td><td>-9223372036854775808 ~ 9223372036854775807</td></tr><tr><td>double</td><td align="center">0.0d</td><td align="center">64 bits</td><td>±4.9E-324 ~ 1.7976931348623157E+308</td></tr><tr><td>boolean</td><td align="center">false</td><td align="center">1 bits</td><td>NA</td></tr><tr><td>char</td><td align="center">“\u000”</td><td align="center">16 bits</td><td>\u000 ~ \uFFF</td></tr></tbody></table><h2 id="自动类型转换-隐式类型转换"><a href="#自动类型转换-隐式类型转换" class="headerlink" title="自动类型转换/隐式类型转换"></a>自动类型转换/隐式类型转换</h2><p>由系统自动完成类型转换，从存储范围小的类型到存储范围大的类型，由JVM自动完成<br><strong>整型，字符型等数据可以混合运算，不同类型数据会转化同一类型在运算，但必须满足转换前的数据类型位数低于转换后数据类型</strong><br><strong>转换等级由低到高: byte——&gt;short——&gt;int(char)——&gt;long—&gt;float——&gt;double</strong></p><pre><code class="java">short a = 1;short b = 2;int c = a+b;System.out.println(c);</code></pre><p>short类型数据 a 与 b相加后 结果自动转换成int类型数据，输出结果为“8”<br>&nbsp;<br>&nbsp;<br><strong>注意</strong></p><ul><li>不能对Boolean类型做转换操作</li><li>不能把储存容量大的对象类型转换为容量小的类型(需要强制类型转换，可能会造成数据丢失)</li><li>转换过程中,可能会有精度损失 <pre><code class="java">byte a = 100;byte b = 100;byte c = a + b;//此行编译错误：&quot;精度损失&quot;</code></pre>a + b 时 结果自动隐式转换为int类型，此时在使用byte类型c引用变量时会发生精读损失<br>&nbsp;<br>&nbsp;<br>如果把 a + b 强转成byte可已解决编译期错误，但还是会造成精度发生错误，运行期出现bug<br>&nbsp;<pre><code class="java">byte a = 100;byte b = 100;byte c =(byte) (a+b);</code></pre></li></ul><hr><h2 id="强制类型转换-显示类型转换"><a href="#强制类型转换-显示类型转换" class="headerlink" title="强制类型转换/显示类型转换"></a>强制类型转换/显示类型转换</h2><p>（即强制显示的把一个数据类型转换成另一种数据类型，当两种数据类型不兼容，或目标类型的取值范围小于源类型时，自动转换将无法进行，这时就需要进行强制类型转换）</p><pre><code class="java">short a=100;int b = a;//100 double c = 1024.1024;long d = (long)c;// 1024,属于正常的转换和丢失精度的情况</code></pre><p>&nbsp;<br>&nbsp;</p><pre><code class="java">int e = 1000;byte f = (byte)e;//数据溢出</code></pre><p>结果无意义<br>&nbsp;<br>&nbsp;</p><h2 id="类型提升（仅在二元运算符条件下）"><a href="#类型提升（仅在二元运算符条件下）" class="headerlink" title="类型提升（仅在二元运算符条件下）"></a>类型提升（仅在二元运算符条件下）</h2><p>1.<em>所有的byte型. short型和char型之间运算将被提升到int型(例外: final修饰的short, char变量相加后不会被自动提升</em><br>2.　如果两个操作数其中有一个是double类型，另一个操作就会转换为double类型。<br>　　否则，如果其中一个操作数是float类型，另一个将会转换为float类型。<br>　　否则，如果其中一个操作数是long类型，另一个会转换为long类型。<br>　　否则，两个操作数都转换为int类型。  </p><pre><code class="java"> byte b = 50; char c = &#39;a&#39;; short s = 1024; int i = 50000; float f =5.67f; double d =0.1234; double result = (f * b) + (i / c) - (d * s);</code></pre><p>f * b中，b被提升为float类型,该子表达式的结果也提升为float类型。<br>i / c中，变量c被提升为int类型，该子表达式的结果提升为int类型。<br>d * s中，变量s被提升为double类型，该子表达式的结果提升为double型。<br>最后，这三个结果类型分别是float，int和double类型，想减后该表达式的最后的结果就是double类型。  </p>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>类型转换</tag>
      
      <tag>Java基础</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>万事开头难</title>
    <link href="undefined2019/12/11/%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2%E6%96%87%E7%AB%A0/"/>
    <url>2019/12/11/%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2%E6%96%87%E7%AB%A0/</url>
    
    <content type="html"><![CDATA[<h1 id="小李哥第一篇博客"><a href="#小李哥第一篇博客" class="headerlink" title="小李哥第一篇博客"></a><center>小李哥第一篇博客</center></h1><hr><h2 id="万事开头难"><a href="#万事开头难" class="headerlink" title="万事开头难"></a>万事开头难</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;半个月前，结束了温馨舒适大学生活，也是结束了十几年的校园生活，从此踏上早八晚八的挤地铁，挤公交，不定时加班。<br>&nbsp;&nbsp;&nbsp;&nbsp;刚进入工作有很多不适应，一直无法进入工作。技术能力不成熟，只能从业务入手，搞得我这段时间没怎么敲代码，感觉与我理想中的工作越走越远。但是我会坚持敲下去，早晚成大牛。<br>&nbsp;&nbsp;&nbsp;&nbsp;接下来，我会通过写博客方式，记录工作生活的趣事，记录学习中遇到的问题和解决办法，有不成熟的地方请大佬们指点，刚搭建的博客，还有很多功能和界面需要完善，日后也会逐步加进去。还要特别感谢常常督促我学习的李某人，给我传授经验的CYJ，还有一起潇洒的两位姜老板。</p><hr><center><font size=5>不忘初心  &nbsp;&nbsp;&nbsp;&nbsp;   厚积薄发</font></center>]]></content>
    
    
    <categories>
      
      <category>Life</category>
      
    </categories>
    
    
    <tags>
      
      <tag>开始</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>