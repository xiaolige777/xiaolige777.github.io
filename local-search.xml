<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Java关键字</title>
    <link href="undefined2019/12/30/java%E5%85%B3%E9%94%AE%E5%AD%97/"/>
    <url>2019/12/30/java%E5%85%B3%E9%94%AE%E5%AD%97/</url>
    
    <content type="html"><![CDATA[<h1 id="关键字整理"><a href="#关键字整理" class="headerlink" title="关键字整理"></a><center>关键字整理</center></h1><table><thead><tr><th align="center">关键字</th><th align="center">含义</th></tr></thead><tbody><tr><td align="center">abstract</td><td align="center">抽象类或方法</td></tr><tr><td align="center">assert</td><td align="center">用来查找内部程序错误</td></tr><tr><td align="center">break</td><td align="center">跳出switch循环</td></tr><tr><td align="center">byte</td><td align="center">8位整数类型</td></tr><tr><td align="center">case</td><td align="center">switch的一个分支</td></tr><tr><td align="center">catch</td><td align="center">捕获异常的try块字句</td></tr><tr><td align="center">char</td><td align="center">Unicode字符类型</td></tr><tr><td align="center">class</td><td align="center">定义一个类的类型</td></tr><tr><td align="center">const</td><td align="center">是保留的关键字，但现在不用</td></tr><tr><td align="center">continue</td><td align="center">在循环末尾继续</td></tr><tr><td align="center">default</td><td align="center">switch的缺省子句</td></tr><tr><td align="center">do</td><td align="center">do/while循环最前面的语句</td></tr><tr><td align="center">double</td><td align="center">双精度浮点数据类型</td></tr><tr><td align="center">else</td><td align="center">if语句的else字句</td></tr><tr><td align="center">enum</td><td align="center">枚举类型</td></tr><tr><td align="center"><strong>extends</strong></td><td align="center">定义一个父类</td></tr><tr><td align="center">final</td><td align="center">一个常量，或是一个不能覆盖的类或方法</td></tr><tr><td align="center">finall</td><td align="center">try块中总会执行的部分</td></tr><tr><td align="center">float</td><td align="center">单精度浮点数类型</td></tr><tr><td align="center">for</td><td align="center">一种循环类型</td></tr><tr><td align="center">goto</td><td align="center">保留字，不被使用</td></tr><tr><td align="center">if</td><td align="center">条件语句</td></tr><tr><td align="center"><strong>implements</strong></td><td align="center">定义一个类实现的接口</td></tr><tr><td align="center">import</td><td align="center">导入一个包</td></tr><tr><td align="center"><strong>instanceof</strong></td><td align="center">测试一个对象是否为一个类的实例</td></tr><tr><td align="center">int</td><td align="center">32位整数类型</td></tr><tr><td align="center"><strong>interface</strong></td><td align="center">一种抽象类，其中包含可以由类实现的方法</td></tr><tr><td align="center">long</td><td align="center">64位长整数类型</td></tr><tr><td align="center">native</td><td align="center">由宿主系统实现的一个方法</td></tr><tr><td align="center">new</td><td align="center">分配一个新对象或数组</td></tr><tr><td align="center">null</td><td align="center">一个空引用（从技术上说是一个直接量，而不是关键字）</td></tr><tr><td align="center">package</td><td align="center">包含类的一个包</td></tr><tr><td align="center">private</td><td align="center">只能由该类的方法访问</td></tr><tr><td align="center">protected</td><td align="center">只能由该类，其子类以及同一个包中的其他类的方法访问</td></tr><tr><td align="center">public</td><td align="center">可以由所有类的方法访问</td></tr><tr><td align="center">return</td><td align="center">从一个方法返回</td></tr><tr><td align="center">short</td><td align="center">16位整数类型</td></tr><tr><td align="center">static</td><td align="center">这个特性是这个类特有的，而不属于这个类的对象</td></tr><tr><td align="center"><strong>strictfp</strong></td><td align="center">对浮点数计算使用严格的规则</td></tr><tr><td align="center">super</td><td align="center">超类对象或构造函数</td></tr><tr><td align="center">switch</td><td align="center">一个选择语句</td></tr><tr><td align="center"><strong>synchronized</strong></td><td align="center">对线程而言是原子的方法或代码</td></tr><tr><td align="center">this</td><td align="center">当前类的一个方法或构造函数的隐含参数</td></tr><tr><td align="center">throw</td><td align="center">抛出一个异常</td></tr><tr><td align="center">try</td><td align="center">补货异常的代码块</td></tr><tr><td align="center">void</td><td align="center">指示一个方法不返回任何值</td></tr><tr><td align="center"><strong>volatile</strong></td><td align="center">确保一个字段可以由多个线程访问</td></tr><tr><td align="center">while</td><td align="center">一种循环</td></tr></tbody></table>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>-Java基础 -关键字</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java中常见转换</title>
    <link href="undefined2019/12/27/%E7%B1%BB%E5%9E%8B%E8%BD%AC%E6%8D%A2/"/>
    <url>2019/12/27/%E7%B1%BB%E5%9E%8B%E8%BD%AC%E6%8D%A2/</url>
    
    <content type="html"><![CDATA[<h1 id="Java中常见转换"><a href="#Java中常见转换" class="headerlink" title="Java中常见转换"></a><center>Java中常见转换</center></h1><h2 id="在了解基本数据类型转换前，先了解Java中8中基本数据类型"><a href="#在了解基本数据类型转换前，先了解Java中8中基本数据类型" class="headerlink" title="在了解基本数据类型转换前，先了解Java中8中基本数据类型"></a>在了解基本数据类型转换前，先了解Java中8中基本数据类型</h2><table><thead><tr><th>Type</th><th align="center">Defult</th><th align="center">Size</th><th>Range</th></tr></thead><tbody><tr><td>byte</td><td align="center">0</td><td align="center">8 bits</td><td>-128 ~ 127</td></tr><tr><td>short</td><td align="center">0</td><td align="center">16 bits</td><td>-32768 ~ 32767</td></tr><tr><td>int</td><td align="center">0</td><td align="center">32 bits</td><td>-2147483648 ~ 2147483647</td></tr><tr><td>float</td><td align="center">0.0f</td><td align="center">32 bits</td><td>±1.4E-45 ~ ±3.4028235E+38</td></tr><tr><td>long</td><td align="center">0L</td><td align="center">64 bits</td><td>-9223372036854775808 ~ 9223372036854775807</td></tr><tr><td>double</td><td align="center">0.0d</td><td align="center">64 bits</td><td>±4.9E-324 ~ 1.7976931348623157E+308</td></tr><tr><td>boolean</td><td align="center">false</td><td align="center">1 bits</td><td>NA</td></tr><tr><td>char</td><td align="center">“\u000”</td><td align="center">16 bits</td><td>\u000 ~ \uFFF</td></tr></tbody></table><h2 id="自动类型转换-隐式类型转换"><a href="#自动类型转换-隐式类型转换" class="headerlink" title="自动类型转换/隐式类型转换"></a>自动类型转换/隐式类型转换</h2><p>由系统自动完成类型转换，从存储范围小的类型到存储范围大的类型，由JVM自动完成<br><strong>整型，字符型等数据可以混合运算，不同类型数据会转化同一类型在运算，但必须满足转换前的数据类型位数低于转换后数据类型</strong><br><strong>转换等级由低到高: byte——&gt;short——&gt;int(char)——&gt;long—&gt;float——&gt;double</strong></p><pre><code class="java">short a = 1;short b = 2;int c = a+b;System.out.println(c);</code></pre><p>short类型数据 a 与 b相加后 结果自动转换成int类型数据，输出结果为“8”<br>&nbsp;<br>&nbsp;<br><strong>注意</strong></p><ul><li>不能对Boolean类型做转换操作</li><li>不能把储存容量大的对象类型转换为容量小的类型(需要强制类型转换，可能会造成数据丢失)</li><li>转换过程中,可能会有精度损失 <pre><code class="java">byte a = 100;byte b = 100;byte c = a + b;//此行编译错误：&quot;精度损失&quot;</code></pre>a + b 时 结果自动隐式转换为int类型，此时在使用byte类型c引用变量时会发生精读损失<br>&nbsp;<br>&nbsp;<br>如果把 a + b 强转成byte可已解决编译期错误，但还是会造成精度发生错误，运行期出现bug<br>&nbsp;<pre><code class="java">byte a = 100;byte b = 100;byte c =(byte) (a+b);</code></pre></li></ul><hr><h2 id="强制类型转换-显示类型转换"><a href="#强制类型转换-显示类型转换" class="headerlink" title="强制类型转换/显示类型转换"></a>强制类型转换/显示类型转换</h2><p>（即强制显示的把一个数据类型转换成另一种数据类型，当两种数据类型不兼容，或目标类型的取值范围小于源类型时，自动转换将无法进行，这时就需要进行强制类型转换）</p><pre><code class="java">short a=100;int b = a;//100 double c = 1024.1024;long d = (long)c;// 1024,属于正常的转换和丢失精度的情况</code></pre><p>&nbsp;<br>&nbsp;</p><pre><code class="java">int e = 1000;byte f = (byte)e;//数据溢出</code></pre><p>结果无意义<br>&nbsp;<br>&nbsp;</p><h2 id="类型提升（仅在二元运算符条件下）"><a href="#类型提升（仅在二元运算符条件下）" class="headerlink" title="类型提升（仅在二元运算符条件下）"></a>类型提升（仅在二元运算符条件下）</h2><p>1.<em>所有的byte型. short型和char型之间运算将被提升到int型(例外: final修饰的short, char变量相加后不会被自动提升</em><br>2.　如果两个操作数其中有一个是double类型，另一个操作就会转换为double类型。<br>　　否则，如果其中一个操作数是float类型，另一个将会转换为float类型。<br>　　否则，如果其中一个操作数是long类型，另一个会转换为long类型。<br>　　否则，两个操作数都转换为int类型。  </p><pre><code class="java"> byte b = 50; char c = &#39;a&#39;; short s = 1024; int i = 50000; float f =5.67f; double d =0.1234; double result = (f * b) + (i / c) - (d * s);</code></pre><p>f * b中，b被提升为float类型,该子表达式的结果也提升为float类型。<br>i / c中，变量c被提升为int类型，该子表达式的结果提升为int类型。<br>d * s中，变量s被提升为double类型，该子表达式的结果提升为double型。<br>最后，这三个结果类型分别是float，int和double类型，想减后该表达式的最后的结果就是double类型。  </p>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>类型转换</tag>
      
      <tag>Java基础</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>万事开头难</title>
    <link href="undefined2019/12/11/%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2%E6%96%87%E7%AB%A0/"/>
    <url>2019/12/11/%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2%E6%96%87%E7%AB%A0/</url>
    
    <content type="html"><![CDATA[<h1 id="小李哥第一篇博客"><a href="#小李哥第一篇博客" class="headerlink" title="小李哥第一篇博客"></a><center>小李哥第一篇博客</center></h1><hr><h2 id="万事开头难"><a href="#万事开头难" class="headerlink" title="万事开头难"></a>万事开头难</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;半个月前，结束了温馨舒适大学生活，也是结束了十几年的校园生活，从此踏上早八晚八的挤地铁，挤公交，不定时加班。<br>&nbsp;&nbsp;&nbsp;&nbsp;刚进入工作有很多不适应，一直无法进入工作。技术能力不成熟，只能从业务入手，搞得我这段时间没怎么敲代码，感觉与我理想中的工作越走越远。但是我会坚持敲下去，早晚成大牛。<br>&nbsp;&nbsp;&nbsp;&nbsp;接下来，我会通过写博客方式，记录工作生活的趣事，记录学习中遇到的问题和解决办法，有不成熟的地方请大佬们指点，刚搭建的博客，还有很多功能和界面需要完善，日后也会逐步加进去。还要特别感谢常常督促我学习的李某人，给我传授经验的CYJ，还有一起潇洒的两位姜老板。</p><hr><center><font size=5>不忘初心  &nbsp;&nbsp;&nbsp;&nbsp;   厚积薄发</font></center>]]></content>
    
    
    <categories>
      
      <category>Life</category>
      
    </categories>
    
    
    <tags>
      
      <tag>开始</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>